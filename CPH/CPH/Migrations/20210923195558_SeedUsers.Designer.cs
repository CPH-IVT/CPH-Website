// <auto-generated />
using System;
using CPH.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CPH.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210923195558_SeedUsers")]
    partial class SeedUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CPH.Models.Counties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("CPH.Models.DatapointColumns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DatapointColumns");
                });

            modelBuilder.Entity("CPH.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("CPH.Models.RegionCounties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegionCounties");
                });

            modelBuilder.Entity("CPH.Models.SavedChartCounties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SavedChartCounties");
                });

            modelBuilder.Entity("CPH.Models.SavedChartDatapoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<int>("DatapointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SavedChartDatapoints");
                });

            modelBuilder.Entity("CPH.Models.SavedChartRegions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<int>("RegionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SavedChartRegions");
                });

            modelBuilder.Entity("CPH.Models.SavedChartYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SavedChartYear");
                });

            modelBuilder.Entity("CPH.Models.SavedCharts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SavedCharts");
                });

            modelBuilder.Entity("CPH.Models.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbriviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbriviation = "AL",
                            Name = "ALABAMA"
                        },
                        new
                        {
                            Id = 2,
                            Abbriviation = "AK",
                            Name = "ALASKA"
                        },
                        new
                        {
                            Id = 4,
                            Abbriviation = "AZ",
                            Name = "ARIZONA"
                        },
                        new
                        {
                            Id = 5,
                            Abbriviation = "AR",
                            Name = "ARKANSAS"
                        },
                        new
                        {
                            Id = 6,
                            Abbriviation = "CA",
                            Name = "CALIFORNIA"
                        },
                        new
                        {
                            Id = 8,
                            Abbriviation = "CO",
                            Name = "COLORADO"
                        },
                        new
                        {
                            Id = 9,
                            Abbriviation = "CT",
                            Name = "CONNECTICUT"
                        },
                        new
                        {
                            Id = 10,
                            Abbriviation = "DE",
                            Name = "DELAWARE"
                        },
                        new
                        {
                            Id = 12,
                            Abbriviation = "FL",
                            Name = "FLORIDA"
                        },
                        new
                        {
                            Id = 13,
                            Abbriviation = "GA",
                            Name = "GEORGIA"
                        },
                        new
                        {
                            Id = 15,
                            Abbriviation = "HI",
                            Name = "HAWAII"
                        },
                        new
                        {
                            Id = 16,
                            Abbriviation = "ID",
                            Name = "IDAHO"
                        },
                        new
                        {
                            Id = 17,
                            Abbriviation = "IL",
                            Name = "ILLINOIS"
                        },
                        new
                        {
                            Id = 18,
                            Abbriviation = "IN",
                            Name = "INDIANA"
                        },
                        new
                        {
                            Id = 19,
                            Abbriviation = "IA",
                            Name = "IOWA"
                        },
                        new
                        {
                            Id = 20,
                            Abbriviation = "KS",
                            Name = "KANSAS"
                        },
                        new
                        {
                            Id = 21,
                            Abbriviation = "KY",
                            Name = "KENTUCKY"
                        },
                        new
                        {
                            Id = 22,
                            Abbriviation = "LA",
                            Name = "LOUISIANA"
                        },
                        new
                        {
                            Id = 23,
                            Abbriviation = "ME",
                            Name = "MAINE"
                        },
                        new
                        {
                            Id = 24,
                            Abbriviation = "MD",
                            Name = "MARYLAND"
                        },
                        new
                        {
                            Id = 25,
                            Abbriviation = "MA",
                            Name = "MASSACHUSETTS"
                        },
                        new
                        {
                            Id = 26,
                            Abbriviation = "MI",
                            Name = "MICHIGAN"
                        },
                        new
                        {
                            Id = 27,
                            Abbriviation = "MN",
                            Name = "MINNESOTA"
                        },
                        new
                        {
                            Id = 28,
                            Abbriviation = "MS",
                            Name = "MISSISSIPPI"
                        },
                        new
                        {
                            Id = 29,
                            Abbriviation = "MO",
                            Name = "MISSOURI"
                        },
                        new
                        {
                            Id = 30,
                            Abbriviation = "MT",
                            Name = "MONTANA"
                        },
                        new
                        {
                            Id = 31,
                            Abbriviation = "NE",
                            Name = "NEBRASKA"
                        },
                        new
                        {
                            Id = 32,
                            Abbriviation = "NV",
                            Name = "NEVADA"
                        },
                        new
                        {
                            Id = 33,
                            Abbriviation = "NH",
                            Name = "NEW HAMPSHIRE"
                        },
                        new
                        {
                            Id = 34,
                            Abbriviation = "NJ",
                            Name = "NEW JERSEY"
                        },
                        new
                        {
                            Id = 35,
                            Abbriviation = "NM",
                            Name = "NEW MEXICO"
                        },
                        new
                        {
                            Id = 36,
                            Abbriviation = "NY",
                            Name = "NEW YORK"
                        },
                        new
                        {
                            Id = 37,
                            Abbriviation = "NC",
                            Name = "NORTH CAROLINA"
                        },
                        new
                        {
                            Id = 38,
                            Abbriviation = "ND",
                            Name = "NORTH DAKOTA"
                        },
                        new
                        {
                            Id = 39,
                            Abbriviation = "OH",
                            Name = "OHIO"
                        },
                        new
                        {
                            Id = 40,
                            Abbriviation = "OK",
                            Name = "OKLAHOMA"
                        },
                        new
                        {
                            Id = 41,
                            Abbriviation = "OR",
                            Name = "OREGON"
                        },
                        new
                        {
                            Id = 42,
                            Abbriviation = "PA",
                            Name = "PENNSYLVANIA"
                        },
                        new
                        {
                            Id = 44,
                            Abbriviation = "RI",
                            Name = "RHODE ISLAND"
                        },
                        new
                        {
                            Id = 45,
                            Abbriviation = "SC",
                            Name = "SOUTH CAROLINA"
                        },
                        new
                        {
                            Id = 46,
                            Abbriviation = "SD",
                            Name = "SOUTH DAKOTA"
                        },
                        new
                        {
                            Id = 47,
                            Abbriviation = "TN",
                            Name = "TENNESSEE"
                        },
                        new
                        {
                            Id = 48,
                            Abbriviation = "TX",
                            Name = "TEXAS"
                        },
                        new
                        {
                            Id = 49,
                            Abbriviation = "UT",
                            Name = "UTAH"
                        },
                        new
                        {
                            Id = 50,
                            Abbriviation = "VT",
                            Name = "VERMONT"
                        },
                        new
                        {
                            Id = 51,
                            Abbriviation = "VA",
                            Name = "VIRGINIA"
                        },
                        new
                        {
                            Id = 53,
                            Abbriviation = "WA",
                            Name = "WASHINGTON"
                        },
                        new
                        {
                            Id = 54,
                            Abbriviation = "WV",
                            Name = "WEST VIRGINIA"
                        },
                        new
                        {
                            Id = 55,
                            Abbriviation = "WI",
                            Name = "WISCONSIN"
                        },
                        new
                        {
                            Id = 56,
                            Abbriviation = "WY",
                            Name = "WYOMING"
                        },
                        new
                        {
                            Id = 60,
                            Abbriviation = "AS",
                            Name = "AMERICAN SAMOA"
                        },
                        new
                        {
                            Id = 66,
                            Abbriviation = "GU",
                            Name = "GUAM"
                        },
                        new
                        {
                            Id = 69,
                            Abbriviation = "MP",
                            Name = "NORTHERN MARIANA ISLANDS"
                        },
                        new
                        {
                            Id = 72,
                            Abbriviation = "PR",
                            Name = "PUERTO RICO"
                        },
                        new
                        {
                            Id = 78,
                            Abbriviation = "VI",
                            Name = "VIRGIN ISLANDS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0e9a83ad-8f2f-4ab9-947b-6d2c5d130d56",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "0d8f650d-6c6c-4ace-b5b0-0af276006ea3",
                            ConcurrencyStamp = "2",
                            Name = "Cartographer",
                            NormalizedName = "Cartographer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "9ba79920-3bac-4420-ba4d-4b0c9ddf6ef8",
                            RoleId = "0e9a83ad-8f2f-4ab9-947b-6d2c5d130d56"
                        },
                        new
                        {
                            UserId = "af8ccf87-2ab5-4be3-9bf5-c422ee785e82",
                            RoleId = "0d8f650d-6c6c-4ace-b5b0-0af276006ea3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CPH.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "9ba79920-3bac-4420-ba4d-4b0c9ddf6ef8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6b4ba4f-1dd1-4ab0-9d03-16979d777ca9",
                            Email = "trimmj@etsu.edu",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRIMMJ@ETSU.EDU",
                            NormalizedUserName = "TRIMMJ@ETSU.EDU",
                            PhoneNumber = "4233415125",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc98a7be-a715-44e2-b5c5-211ceca60afb",
                            TwoFactorEnabled = false,
                            UserName = "trimmj@etsu.edu",
                            FirstName = "Joshua",
                            LastName = "Trimm"
                        },
                        new
                        {
                            Id = "af8ccf87-2ab5-4be3-9bf5-c422ee785e82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "769ebcde-8cd3-4063-9065-da7213f40dfc",
                            Email = "jbthype@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JBTHYPE@GMAIL.COM",
                            NormalizedUserName = "JBTHYPE@GMAIL.COM",
                            PhoneNumber = "4233415125",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2bfd401-dbbe-4188-8ea6-772cd54c950b",
                            TwoFactorEnabled = false,
                            UserName = "jbthype@gmail.com",
                            FirstName = "Mariam",
                            LastName = "Trimm"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
