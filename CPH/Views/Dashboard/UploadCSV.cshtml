<!--Note that the Ajax call has hard coded dependencies.-->
@model CPH.Models.ViewModels.UploadCSVModel

@{
    ViewData["Title"] = "Upload CPH Data";
}

<h1>CSV Upload</h1>

<h4>Upload yearly CSV's from the County Health Rankings website.</h4>
<hr />

@* Stylizing classes uses Twitter Bootstrap CSS library. Form-groups hold content for areas of the DOM. *@
<div class="row">
    <div class="col-md-4">

        @* JavaScript grabs the upload-form id and manipulates the uploaded file.*@
        <div id="upload-form">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <input id="UserIdentity" hidden value="@User.Identity.Name" asp-for="UserIdentity" class="form-control" />
                <span asp-validation-for="UserIdentity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input hidden id="UploadDate" value="@DateTime.Now" asp-for="UploadDate" class="form-control" />
                <span asp-validation-for="UploadDate" class="text-danger"></span>
            </div>
            <input id="OriginalFile" type="file" asp-for="OriginalFile" class="form-control" accept=".csv, .xlsx, .xlsm, .xlsb, .xls" hidden />
            <div class="form-group">
                <label asp-for="AlteredFile" class="control-label"></label>
                <input id="AlteredFile" type="file" asp-for="AlteredFile" class="form-control" accept=".csv, .xlsx, .xlsm, .xlsb, .xls" />
                <span asp-validation-for="AlteredFile" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input id="upload-button" type="submit" value="Upload" class="btn btn-primary" />
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">

        const form = {
            userId: document.getElementById("UserIdentity").value,
            uploadDate: document.getElementById("UploadDate").value,
            originalCsv: document.getElementById("OriginalFile"),
            alteredCsv: document.getElementById("AlteredFile"),
            get getUserId() {
                return this.userId;
            },
            get getUploadDate() {
                return this.uploadDate;
            },
            get getOriginalCsv() {
                // The input select file only uploads one file for this input specification.
                return this.originalCsv.files[0];
            },
            get getAlteredCsv() {
                // The input select file only uploads one file for this input specification.
                return this.alteredCsv.files[0];
            },
            get getForm() {

                // Creates the form dynamically from nodes in the upload-form div.
                var formData = new FormData();

                // Populate the form with uploaded data and other nodes within the upload-form div.
                formData.append("File", this.getAlteredCsv);
                formData.append("OriginalFile", this.getOriginalCsv);
                formData.append("UserIdentity", this.getUserId);
                formData.append("UploadDate", this.getUploadDate);

                return formData;
            }
        };

        // Get the upload-button node for monitoring click events. See near the end of file. 
        var uploadButton = document.getElementById("upload-button");

        // No functionality here, just used to validate that the altered CSV file was added to the input File node. 
        const fileSelector = document.getElementById('File');
        fileSelector.addEventListener('change', (event) => {
            const fileList = event.target.files[0];
            console.log("File Manipulated: " + fileList.name);
        });

        /**
         * Ajax call to upload and validate the CHR CSV and user web page. 
         * Screen refresh for over writing file with matching year and non-matching hash code is handled in function ajaxSubmitForm().
         * */
        function ensureYearIsNotInDirectory() {

            $.ajax({
                type: "POST",
                url: "/Dashboard/ValidateAndUploadCSV", 
                data: form.getForm,
                contentType: false,
                processData: false,
                cache: false,
                success: function (response) {
                    
                    // if the server finds the same file in a directory.
                    if (response["HashCodeMatch"]) {
                        alert("File has already been uploaded");
                    }

                    // if the server responds that there is a matched year
                    if (response["FileYearMatch"]) {

                        // if the user agrees to override the current year, submit it to the server.
                        var userAnswer = confirm("There is a duplicate year. Do you want to override the file on the server?");

                        if (userAnswer) {
                            ajaxSubmitForm();
                            return; // make sure that the data is in the form before reloading the page. 
                        }
                    }

                    // Notify the user if the upload was successful.
                    if (response["UploadSuccessful"]) {
                        alert("File upload sucessful.");
                    }

                },
                error: function (response) {
                    console.warn(response);
                    console.warn(form.getForm);
                }
            });

            // reload the web page.
            location.reload(true);
        }

        /**
         * Used to submit the form and CSV files if the year was found and the hash code did not match. 
         * */
        async function ajaxSubmitForm() {
           
            $.ajax({
                type: "POST",
                url: "/Dashboard/OverrideCsvYear",
                data: form.getForm,
                contentType: false,
                processData: false,
                cache: false,
                success: function (response) {

                    // check the response to see if the file was uploaded correctly
                    if (response["FileUploaded"]) {
                        alert("File has been overriden.");
                        
                    }
             
                    // if it was not, console log the errors.
                    console.error(response);
                    console.error(form.getForm);
                    
                },
                error: function (response) {
                    console.warn(response);
                    console.error(form.getForm);
                }
            }).done(console.log("ajaxSubmitForm done."));
            location.reload();
        }

        /**
         * Routine assumes file names formatted as CHR-YYYY.csv where YYYY denotes year.
         * Routine assumes Windows format text files. 
         * Routine assumes that the file has two header rows, that year is located in column six, and that year is the same for all records.
         *  SEE READSINGLEFILE! YOU NEED TO ABSTRACT TO IMPLEMENT DRY METHODOLOGY. 
         * @@param event
         */
        function readAndCopyOriginalFile(event) {

            var originalFile = event.target.files[0];

            // if the file has not been uploaded, cancel the method
            if (!originalFile) {
                return;
            }


            var reader = new FileReader();

            reader.onload = function (a) {

                // get the csv file that was uploaded
                var contents = a.target.result;

                // split the csv on \r rows
                var rows = contents.split("\r");

                // Get the year of the CSV file.
                var year = rows[2].split(",")[5];  

                // ORIGINAL CSV
                let originalCsvData = new Blob([rows], { type: 'text/csv' });


                originalFile = new File([originalCsvData], `CHR-${year}.csv`, { type: "text/csv", lastModified: new Date().getTime() });

                var containerOriginal = new DataTransfer();
                containerOriginal.items.add(originalFile);

                // get the original input element for the CSV
                var originalCSVInput = document.getElementById("OriginalFile");

                originalCSVInput.files = containerOriginal.files;
            }
            reader.readAsBinaryString(originalFile);
        }

        /**
         * 
         * 
         * @@param event
         */
        function readSingleFile(event) {

            // check if a file has been uploaded
            var file = event.target.files[0];

            var originalFile;

            // if the file has not been uploaded, cancel the method
            if (!file) {
                return;
            }


            var reader = new FileReader();

            reader.onload = function (a) {

                // get the csv file that was uploaded
                var contents = a.target.result;

                // split the csv on \r rows
                var rows = contents.split("\r");

                // Remove the second row of the CSV
                rows.splice(1, 1);

                var year = rows[2].split(",")[5];

                let csvData = new Blob([rows], { type: 'text/csv' });
                console.log(csvData);

                var file = new File([csvData], `${year}.csv`, { type: "text/csv", lastModified: new Date().getTime() });

                var container = new DataTransfer();
                container.items.add(file);

                // get the input element to set the new CSV file object to
                var fileInputerElement = document.getElementById('File');

                // set the new CSV file to the input element
                fileInputerElement.files = container.files;
            };
            reader.readAsBinaryString(file);
        }

        document.getElementById('File').addEventListener('change', readAndCopyOriginalFile, false);
        document.getElementById('File').addEventListener('change', readSingleFile, false);
        uploadButton.addEventListener('click', ensureYearIsNotInDirectory);
    </script>
}
